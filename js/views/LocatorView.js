class LocatorView {
    constructor() {
        this.storage = new StorageService();
        this.isScanning = false;
    }

    render() {
        let html = '<div class="locator-container">';
        
        // Header
        html += `
            <div class="scan-status">
                <h2>üì° –õ–æ–∫–∞—Ç–æ—Ä —Å–µ—Ç–∏</h2>
                <p>–ü—Ä–æ—Ç–æ–∫–æ–ª: [W] WiFi Local</p>
                ${this.isScanning ? 
                    '<div class="scan-animation"></div><p>–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...</p>' : 
                    '<button class="btn btn-primary" id="startScanBtn">üîç –ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</button>'
                }
            </div>
        `;
        
        if (this.isScanning) {
            // –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            html += this.renderFoundParticipants();
        }
        
        html += '</div>';
        return html;
    }

    renderFoundParticipants() {
        // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        const foundParticipants = [
            {
                id: 'temp-1',
                callsign: '–ë—Ä–∞–≤–æ',
                isNew: true,
                signal: -45,
                distance: '120–º –Æ'
            },
            {
                id: 'temp-2', 
                callsign: '–ß–∞—Ä–ª–∏',
                isNew: true,
                signal: -60,
                distance: '350–º –°–í'
            }
        ];

        // –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ "–≤ —Å–µ—Ç–∏"
        const knownParticipants = this.storage.loadParticipants()
            .filter(p => p.state && p.state.online);

        let html = '<div class="found-participants">';
        
        if (foundParticipants.length > 0 || knownParticipants.length > 0) {
            html += '<h3>üü¢ –í —Å–µ—Ç–∏ —Å–µ–π—á–∞—Å:</h3>';
            
            // –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
            foundParticipants.forEach(p => {
                html += `
                    <div class="network-participant new">
                        <div class="participant-header">
                            <span class="participant-icon">üë§</span>
                            <div class="participant-info">
                                <div class="participant-callsign">${p.callsign} (–Ω–æ–≤—ã–π)</div>
                                <div class="signal-strength">
                                    üì∂ –°–∏–≥–Ω–∞–ª: ${this.getSignalStrength(p.signal)}
                                </div>
                                ${p.distance ? `<div class="participant-distance">üìç ${p.distance}</div>` : ''}
                            </div>
                        </div>
                        <button class="btn btn-secondary add-btn" data-callsign="${p.callsign}">
                            ‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É
                        </button>
                    </div>
                `;
            });
            
            // –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
            knownParticipants.forEach(p => {
                html += `
                    <div class="network-participant">
                        <div class="participant-header">
                            <span class="participant-icon">${p.getDisplayIcon()}</span>
                            <div class="participant-info">
                                <div class="participant-callsign">
                                    ${p.identity.callsign} ${p.isFavorite ? '‚≠ê' : ''}
                                </div>
                                <div class="signal-strength">
                                    üì∂ –í —Å–µ—Ç–∏
                                </div>
                            </div>
                        </div>
                        <button class="btn btn-secondary call-btn" data-id="${p.id}">
                            üì° –í—ã–∑–≤–∞—Ç—å
                        </button>
                    </div>
                `;
            });
        } else {
            html += '<p class="no-results">–£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
        }
        
        html += '</div>';
        return html;
    }

    getSignalStrength(signal) {
        if (signal > -50) return '–û—Ç–ª–∏—á–Ω—ã–π';
        if (signal > -70) return '–•–æ—Ä–æ—à–∏–π';
        if (signal > -85) return '–°—Ä–µ–¥–Ω–∏–π';
        return '–°–ª–∞–±—ã–π';
    }

    attachEventListeners() {
        // Start scan button
        const startBtn = document.getElementById('startScanBtn');
        if (startBtn) {
            startBtn.addEventListener('click', () => {
                this.startScanning();
            });
        }

        // Add participant buttons
        document.querySelectorAll('.add-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const callsign = btn.dataset.callsign;
                this.addParticipant(callsign);
            });
        });

        // Call buttons
        document.querySelectorAll('.call-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const participantId = btn.dataset.id;
                console.log('Calling participant:', participantId);
                alert('–§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–µ—Ä—Å–∏–∏ 1.4');
            });
        });
    }

    startScanning() {
        this.isScanning = true;
        const mainContent = document.getElementById('mainContent');
        mainContent.innerHTML = this.render();
        this.attachEventListeners();

        // –ò–º–∏—Ç–∞—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            this.isScanning = false;
            mainContent.innerHTML = this.render();
            this.attachEventListeners();
        }, 3000);
    }

    addParticipant(callsign) {
        // TODO: –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –ø–æ–∑—ã–≤–Ω—ã–º
        console.log('Adding participant with callsign:', callsign);
        alert(`–£—á–∞—Å—Ç–Ω–∏–∫ ${callsign} –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É`);
    }
}