class FoldersComponent {
    constructor() {
        console.log("üîß FoldersComponent: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å portal –º–µ–Ω—é");
        
        if (typeof StorageManager === 'undefined') {
            console.error("‚ùå StorageManager –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }
        
        try {
            this.folders = StorageManager.getFolders();
            this.contacts = StorageManager.getContacts();
            console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", this.folders.length, "–ø–∞–ø–æ–∫");
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
            this.folders = [];
            this.contacts = [];
        }
        
        this.activeDropdown = null;
        this.createMenuPortal();
        this.bindGlobalEvents();
        
        setTimeout(() => {
            this.render();
        }, 100);
    }

    createMenuPortal() {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ—Ö –≤—ã–ø–∞–¥–∞—é—â–∏—Ö –º–µ–Ω—é –≤ body
        let portal = document.getElementById('dropdown-portal');
        if (!portal) {
            portal = document.createElement('div');
            portal.id = 'dropdown-portal';
            portal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                pointer-events: none;
                z-index: 99999;
            `;
            document.body.appendChild(portal);
            console.log("‚úÖ Portal –¥–ª—è –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω");
        }
    }

    bindGlobalEvents() {
        document.addEventListener("click", (e) => {
            if (e.target.classList.contains("folder-menu-btn")) {
                e.stopPropagation();
                const folderId = e.target.dataset.folder;
                console.log("üìÇ –ö–ª–∏–∫ –ø–æ –º–µ–Ω—é –ø–∞–ø–∫–∏:", folderId);
                this.toggleDropdown(folderId, e.target);
            } else if (!e.target.closest(".folder-dropdown")) {
                this.closeDropdowns();
            }
        });
        
        document.addEventListener("scroll", () => this.closeDropdowns());
        window.addEventListener("resize", () => this.closeDropdowns());
    }

    render() {
        console.log("üé® –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–∞–ø–æ–∫ —Å portal –º–µ–Ω—é...");
        const mainContent = document.querySelector(".main-content");
        
        if (!mainContent) {
            console.error("‚ùå .main-content –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }

        // –û—á–∏—â–∞–µ–º portal –æ—Ç —Å—Ç–∞—Ä—ã—Ö –º–µ–Ω—é
        const portal = document.getElementById('dropdown-portal');
        if (portal) {
            portal.innerHTML = '';
        }

        let foldersHTML = this.folders.map((folder, index) => {
            const statusBadges = this.createStatusBadges(folder);
            const hasActions = !folder.system;
            const details = folder.details && folder.details.length > 0 ? 
                `<div class="folder-details">${folder.details.map(d => `<span class="detail-item">${d}</span>`).join("")}</div>` : "";
            
            // –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –≤ portal
            if (hasActions && portal) {
                const menuHTML = `
                    <div class="folder-dropdown" id="dropdown-${folder.id}" style="display: none; pointer-events: auto;">
                        <button class="folder-dropdown-item" onclick="window.foldersComponent.renameFolder('${folder.id}')">
                            <span>‚úèÔ∏è</span> –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å
                        </button>
                        <button class="folder-dropdown-item danger" onclick="window.foldersComponent.deleteFolder('${folder.id}')">
                            <span>üóëÔ∏è</span> –£–¥–∞–ª–∏—Ç—å
                        </button>
                    </div>
                `;
                portal.innerHTML += menuHTML;
            }
            
            return `
                <div class="folder-card" data-folder="${folder.id}">
                    <div class="folder-header">
                        <div class="folder-info">
                            <span class="folder-icon">${folder.icon}</span>
                            <span class="folder-name">${folder.name} (${folder.deviceCount})</span>
                        </div>
                        <div class="status-badges">${statusBadges}</div>
                        ${hasActions ? `
                            <div class="folder-actions">
                                <button class="folder-menu-btn" data-folder="${folder.id}" id="btn-${folder.id}">‚ãÆ</button>
                            </div>
                        ` : ""}
                    </div>
                    ${details}
                </div>
            `;
        }).join("");

        mainContent.innerHTML = `
            <div class="folders-list">
                ${foldersHTML}
                <div class="folder-card add-folder" onclick="window.foldersComponent.showCreateDialog()">
                    <div class="add-folder-content">
                        <span class="folder-icon">üìÅ</span>
                        <span class="add-text">+ –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É</span>
                    </div>
                </div>
            </div>
            <div class="search-section">
                <div class="search-bar">
                    <span class="search-icon">üîç</span>
                    <input type="text" placeholder="ÔøΩÔøΩ –ü–æ–∏—Å–∫ –≤ –ø–∞–ø–∫–∞—Ö..." oninput="window.foldersComponent.searchFolders(this.value)">
                </div>
            </div>
        `;

        console.log("‚úÖ HTML –æ–±–Ω–æ–≤–ª–µ–Ω —Å portal –º–µ–Ω—é");
        this.bindFolderClicks();
    }

    bindFolderClicks() {
        document.querySelectorAll(".folder-card[data-folder]").forEach(card => {
            card.addEventListener("click", (e) => {
                if (!e.target.closest(".folder-actions")) {
                    this.openFolder(card.dataset.folder);
                }
            });
        });
    }

    createStatusBadges(folder) {
        let badges = "";
        if (folder.statusOk > 0) badges += `<span class="status-badge status-ok">${folder.statusOk}</span>`;
        if (folder.statusWarning > 0) badges += `<span class="status-badge status-warning">${folder.statusWarning}</span>`;
        if (folder.statusError > 0) badges += `<span class="status-badge status-error">${folder.statusError}</span>`;
        return badges;
    }

    showCreateDialog() {
        console.log("‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏");
        const name = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏:");
        if (name && name.trim()) {
            try {
                StorageManager.createFolder(name.trim());
                this.folders = StorageManager.getFolders();
                this.render();
                NotificationManager.show(`üìÅ –ü–∞–ø–∫–∞ "${name}" —Å–æ–∑–¥–∞–Ω–∞`, "success");
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏:", error);
                NotificationManager.show("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏", "error");
            }
        }
    }

    renameFolder(folderId) {
        console.log("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏:", folderId);
        const folder = this.folders.find(f => f.id === folderId);
        if (folder) {
            const newName = prompt("–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏:", folder.name);
            if (newName && newName.trim() && newName !== folder.name) {
                try {
                    StorageManager.renameFolder(folderId, newName.trim());
                    this.folders = StorageManager.getFolders();
                    this.render();
                    NotificationManager.show(`‚úèÔ∏è –ü–∞–ø–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ "${newName}"`, "success");
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:", error);
                    NotificationManager.show("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è", "error");
                }
            }
        }
        this.closeDropdowns();
    }

    deleteFolder(folderId) {
        console.log("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏:", folderId);
        const folder = this.folders.find(f => f.id === folderId);
        if (folder) {
            const hasContacts = this.contacts.some(contact => 
                contact.folders && contact.folders.includes(folderId)
            );
            
            let confirmMessage = `–£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É "${folder.name}"?`;
            if (hasContacts) {
                confirmMessage += `\n\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í —ç—Ç–æ–π –ø–∞–ø–∫–µ –µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã!\n–í—Å–µ —Å–≤—è–∑–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å –ø–∞–ø–∫–æ–π –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.`;
            }
            
            if (confirm(confirmMessage)) {
                try {
                    StorageManager.deleteFolder(folderId);
                    this.folders = StorageManager.getFolders();
                    this.contacts = StorageManager.getContacts();
                    this.render();
                    NotificationManager.show(`üóëÔ∏è –ü–∞–ø–∫–∞ "${folder.name}" —É–¥–∞–ª–µ–Ω–∞${hasContacts ? ' (–∫–æ–Ω—Ç–∞–∫—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã)' : ''}`, "success");
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:", error);
                    NotificationManager.show("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", "error");
                }
            }
        }
        this.closeDropdowns();
    }

    openFolder(folderId) {
        const folder = this.folders.find(f => f.id === folderId);
        if (folder) {
            NotificationManager.show(`üìÅ –û—Ç–∫—Ä—ã—Ç–∏–µ: ${folder.name}`, "info");
        }
    }

    searchFolders(query) {
        if (query.length > 2) {
            NotificationManager.show(`üîç –ü–æ–∏—Å–∫: ${query}`, "info");
        }
    }

    toggleDropdown(folderId, buttonElement) {
        console.log(`üéØ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –ø–∞–ø–∫–∏: ${folderId}`);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–µ–Ω—é
        this.closeDropdowns();
        
        const dropdown = document.getElementById(`dropdown-${folderId}`);
        
        if (buttonElement && dropdown) {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–Ω–æ–ø–∫–∏
            const rect = buttonElement.getBoundingClientRect();
            
            console.log("üìç –ü–æ–∑–∏—Ü–∏—è –∫–Ω–æ–ø–∫–∏:", {
                top: rect.top,
                right: rect.right,
                bottom: rect.bottom,
                left: rect.left,
                width: rect.width,
                height: rect.height
            });
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –º–µ–Ω—é –¢–û–ß–ù–û –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π, —Å–ø—Ä–∞–≤–∞
            const menuTop = rect.bottom + 5;
            const menuLeft = rect.right - 160; // 160px - —à–∏—Ä–∏–Ω–∞ –º–µ–Ω—é
            
            dropdown.style.position = 'fixed';
            dropdown.style.top = menuTop + 'px';
            dropdown.style.left = Math.max(10, menuLeft) + 'px'; // –ù–µ –º–µ–Ω—å—à–µ 10px –æ—Ç –∫—Ä–∞—è
            dropdown.style.display = 'block';
            dropdown.style.zIndex = '99999';
            
            this.activeDropdown = folderId;
            
            console.log(`‚úÖ –ú–µ–Ω—é –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è –ø–∞–ø–∫–∏ ${folderId}:`, {
                top: menuTop,
                left: Math.max(10, menuLeft),
                zIndex: 99999
            });
        } else {
            console.error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–∞–ø–∫–∏ ${folderId}:`, {
                button: !!buttonElement,
                dropdown: !!dropdown
            });
        }
    }

    closeDropdowns() {
        const portal = document.getElementById('dropdown-portal');
        if (portal) {
            portal.querySelectorAll('.folder-dropdown').forEach(dropdown => {
                dropdown.style.display = 'none';
            });
        }
        this.activeDropdown = null;
    }
}
