class AllO_G_Communicator {
    constructor() {
        this.participants = new Map();
        this.selectedParticipant = null;
        this.init();
    }

    init() {
        this.loadTestData();
        this.renderParticipants();
        this.setupEventListeners();
        this.updateProtocolStatuses();
        console.log('AllO_G v1.1.5 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    loadTestData() {
        if (typeof testParticipants !== 'undefined') {
            testParticipants.forEach(participant => {
                this.participants.set(participant.id, participant);
            });
        }
    }

renderParticipants() {
const container = document.getElementById("participantsList");
if (!container) return;

const participantsArray = Array.from(this.participants.values())
.sort((a, b) => {
if (a.isFavorite && !b.isFavorite) return -1;
if (!a.isFavorite && b.isFavorite) return 1;
return a.callsign.localeCompare(b.callsign);
});

const newCard = `
<div class="participant-card new-participant" onclick="app.addNewParticipant()">
<div class="new-participant-content">
<div class="new-participant-icon">‚ûï</div>
<div class="new-participant-text">–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞</div>
<div class="swipe-hint">‚Üê –°–≤–∞–π–ø –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</div>
</div>
</div>
`;

const participantCards = participantsArray.map(participant => {
const protocols = Array.isArray(participant.protocols) ? 
participant.protocols.join(" ") : 
(participant.protocols || "");

return `
<div class="participant-card ${participant.status?.connection || "offline"}" 
data-participant-id="${participant.id}"
onclick="app.selectParticipant('${participant.id}')">
<div class="participant-header">
<span class="participant-callsign">${participant.callsign}</span>
<span class="participant-status ${participant.status?.connection || "offline"}">
${this.getStatusIcon(participant.status?.connection || "offline")}
</span>
</div>
<div class="participant-role">${participant.role}</div>
<div class="participant-protocols">${protocols}</div>
<div class="participant-location">${participant.status?.location || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}</div>
</div>
`;
});

container.innerHTML = newCard + participantCards.join("");
}
    selectParticipant(participantId) {
        this.selectedParticipant = participantId;
        const participant = this.participants.get(participantId);
        
        if (participant) {
            this.showNotification(`–í—ã–±—Ä–∞–Ω: ${participant.callsign}`);
        }
    }

    showNotification(message) {
        console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', message);
    }

    updateProtocolStatuses() {
        const statusI = document.getElementById('status-I');
        const statusW = document.getElementById('status-W');
        const statusA = document.getElementById('status-A');
        const statusZ = document.getElementById('status-Z');
        
        if (statusI) statusI.textContent = 'üü¢4G';
        if (statusW) statusW.textContent = '‚ö´';
        if (statusA) statusA.textContent = '‚ö´';
        if (statusZ) statusZ.textContent = '‚ö´';
    }

addNewParticipant() {
const callsign = prompt("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑—ã–≤–Ω–æ–π:");
if (callsign) {
const newId = "new-" + Date.now();
const newParticipant = {
id: newId,
callsign: callsign,
role: "–£—á–∞—Å—Ç–Ω–∏–∫",
protocols: ["I"],
status: {
connection: "offline",
location: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
},
isFavorite: false,
lastSeen: "–¢–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω"
};

this.participants.set(newId, newParticipant);
this.renderParticipants();
this.showNotification(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: ${callsign}`);
}
}

toggleFavorite(participantId) {
const participant = this.participants.get(participantId);
if (participant) {
participant.isFavorite = !participant.isFavorite;
this.renderParticipants();
this.showNotification(`‚≠ê ${participant.callsign} ${participant.isFavorite ? "–¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" : "—É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"}`);
}
}

    setupEventListeners() {
        console.log('Event listeners —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }
}

function showInfo() {
alert(`üî• AllO_G v1.1.5 - –ì–∏–±—Ä–∏–¥–Ω—ã–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä

üì° –ü–†–û–¢–û–ö–û–õ–´ –°–í–Ø–ó–ò:
‚Ä¢ I - –ò–Ω—Ç–µ—Ä–Ω–µ—Ç (4G/5G/WiFi)
‚Ä¢ W - WiFi Direct (–ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ)
‚Ä¢ A - Amateur Radio (—Ä–∞–¥–∏–æ—Å–≤—è–∑—å)
‚Ä¢ Z - ZigBee Mesh (—è—á–µ–∏—Å—Ç–∞—è —Å–µ—Ç—å)

‚ö° –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚Ä¢ –ú—É–ª—å—Ç–∏–ø—Ä–æ—Ç–æ–∫–æ–ª—å–Ω–∞—è —Å–≤—è–∑—å
‚Ä¢ –ê–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ –ì—Ä—É–ø–ø–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
‚Ä¢ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã

üéØ –ü–†–ò–ú–ï–ù–ï–ù–ò–ï:
‚Ä¢ –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –ê–≤–∞—Ä–∏–π–Ω–æ-—Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –≥—Ä—É–ø–ø
‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–∞—è —Å–≤—è–∑—å`);
}
function showProtocolInfo(protocol) {
    const protocols = {
        'I': '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª',
        'W': 'WiFi Direct',
        'A': 'Amateur Radio',
        'Z': 'ZigBee Mesh'
    };
    alert(`${protocol}: ${protocols[protocol] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª'}`);
}

function openDialer() {
    alert('üìû –î–∏–∞–ª–µ—Ä');
}

function openGroupActions() {
    alert('üë• –ì—Ä—É–ø–ø–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è');
}

function openMap() {
    alert('üìç –ö–∞—Ä—Ç–∞');
}

function openVoiceCommands() {
    alert('üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã');
}

function openHelp() {
    alert('‚ùì –°–ø—Ä–∞–≤–∫–∞');
}

function openSettings() {
    alert('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏');
}

let app;
document.addEventListener('DOMContentLoaded', () => {
    app = new AllO_G_Communicator();
});
