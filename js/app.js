// –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è AllO_G
class AllO_App {
    constructor() {
        this.version = '1.1.5';
        this.participants = [];
        this.currentPage = 'contacts';
        this.protocols = {
            'I': { name: 'Internet', active: true, signal: '4G' },
            'W': { name: 'WiFi Direct', active: false },
            'A': { name: 'Amateur Radio', active: false },
            'Z': { name: 'ZigBee Mesh', active: false }
        };
        
        this.init();
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    init() {
        console.log(`üöÄ AllO_G v${this.version} Starting...`);
        this.loadParticipants();
        this.renderParticipants();
        this.setupEventListeners();
        this.setupTouchHandlers();
        this.registerServiceWorker();
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    loadParticipants() {
        // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        const defaultParticipants = [
            {
                id: 'user-001',
                callsign: '–ê–ª—å—Ñ–∞',
                name: '–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞',
                role: '–û–ø–µ—Ä–∞—Ç–æ—Ä',
                protocols: ['I', 'W'],
                status: {
                    connection: 'online',
                    location: '–ë–∞–∑–∞-1'
                },
                isFavorite: true,
                battery: 67,
                lastActivity: '2–º –Ω–∞–∑–∞–¥'
            },
            {
                id: 'droid-001',
                callsign: '–ë–µ—Ç–∞',
                name: '–î—Ä–æ–∏–¥ R2',
                role: '–†–∞–∑–≤–µ–¥—á–∏–∫',
                protocols: ['W', 'Z'],
                status: {
                    connection: 'online',
                    location: '–°–µ–∫—Ç–æ—Ä-7'
                },
                isFavorite: false,
                battery: 89,
                lastActivity: '–°–µ–π—á–∞—Å'
            },
            {
                id: 'device-001',
                callsign: '–ì–∞–º–º–∞',
                name: '–ú–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏—è',
                role: '–ú–æ–Ω–∏—Ç–æ—Ä',
                protocols: ['Z'],
                status: {
                    connection: 'away',
                    location: '–í—ã—à–∫–∞-3'
                },
                isFavorite: false,
                battery: 100,
                lastActivity: '5–º –Ω–∞–∑–∞–¥'
            }
        ];
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö
        const saved = localStorage.getItem('allo_participants');
        if (saved) {
            try {
                this.participants = JSON.parse(saved);
            } catch (e) {
                this.participants = defaultParticipants;
            }
        } else {
            this.participants = defaultParticipants;
        }
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    sortParticipants() {
        return [...this.participants].sort((a, b) => {
            // –°–Ω–∞—á–∞–ª–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ
            if (a.isFavorite && !b.isFavorite) return -1;
            if (!a.isFavorite && b.isFavorite) return 1;
            // –ó–∞—Ç–µ–º –ø–æ –ø–æ–∑—ã–≤–Ω–æ–º—É
            return a.callsign.localeCompare(b.callsign);
        });
    }
    
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    renderParticipants() {
        const container = document.getElementById('participants-container');
        if (!container) return;
        
        container.innerHTML = '';
        
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
        const sorted = this.sortParticipants();
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
        sorted.forEach(participant => {
            const card = this.createParticipantCard(participant);
            container.appendChild(card);
        });
        
        // –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        const addCard = this.createAddCard();
        container.appendChild(addCard);
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    createParticipantCard(participant) {
        const card = document.createElement('div');
        card.className = `participant-card ${participant.isFavorite ? 'favorite' : ''}`;
        card.dataset.id = participant.id;
        
        const statusClass = participant.status.connection;
        
        card.innerHTML = `
            <button class="favorite-button" onclick="app.toggleFavorite('${participant.id}')">
                ${participant.isFavorite ? '‚≠ê' : '‚òÜ'}
            </button>
            
            <div class="participant-header">
                <div>
                    <div class="participant-name">
                        ${participant.name}
                    </div>
                    <div class="participant-callsign">
                        üì¢ "${participant.callsign}"
                    </div>
                </div>
                <div class="participant-status">
                    <span class="status-indicator ${statusClass}"></span>
                    <span>${participant.battery}%üîã</span>
                </div>
            </div>
            
            <div class="participant-info">
                <div>üé≠ ${participant.role}</div>
                <div>üì° ${participant.protocols.join(' ‚Ä¢ ')}</div>
                <div>üìç ${participant.status.location}</div>
                <div>‚è±Ô∏è ${participant.lastActivity}</div>
            </div>
        `;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É
        card.addEventListener('click', (e) => {
            if (!e.target.classList.contains('favorite-button')) {
                this.onParticipantClick(participant);
            }
        });
        
        return card;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    createAddCard() {
        const card = document.createElement('div');
        card.className = 'participant-card add-card';
        
        card.innerHTML = `
            <div class="add-icon" style="font-size: 48px;">‚ûï</div>
            <div style="margin-top: 10px;">–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞</div>
        `;
        
        card.addEventListener('click', () => this.addNewParticipant());
        
        return card;
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    toggleFavorite(participantId) {
        const participant = this.participants.find(p => p.id === participantId);
        if (participant) {
            participant.isFavorite = !participant.isFavorite;
            this.saveParticipants();
            this.renderParticipants();
        }
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
    showInfo() {
        const info = `üî• AllO_G v${this.version} - –ì–∏–±—Ä–∏–¥–Ω—ã–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä

üì° –ü–†–û–¢–û–ö–û–õ–´ –°–í–Ø–ó–ò:
‚Ä¢ I - –ò–Ω—Ç–µ—Ä–Ω–µ—Ç (4G/5G/WiFi)
‚Ä¢ W - WiFi Direct (–ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ)
‚Ä¢ A - Amateur Radio (—Ä–∞–¥–∏–æ—Å–≤—è–∑—å)
‚Ä¢ Z - ZigBee Mesh (—è—á–µ–∏—Å—Ç–∞—è —Å–µ—Ç—å)

‚ö° –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚Ä¢ –ú—É–ª—å—Ç–∏–ø—Ä–æ—Ç–æ–∫–æ–ª—å–Ω–∞—è —Å–≤—è–∑—å
‚Ä¢ –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
‚Ä¢ –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
‚Ä¢ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${this.participants.length}
‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö: ${this.participants.filter(p => p.isFavorite).length}`;
        
        alert(info);
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
    showMenu() {
        alert('‚öôÔ∏è –ú–µ–Ω—é –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    }
    
    // –ö–ª–∏–∫ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    onParticipantClick(participant) {
        console.log('Connecting to:', participant.callsign);
        alert(`üìû –í—ã–∑–æ–≤: ${participant.callsign}\nüìç ${participant.status.location}`);
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    addNewParticipant() {
        const callsign = prompt('–ü–æ–∑—ã–≤–Ω–æ–π —É—á–∞—Å—Ç–Ω–∏–∫–∞:');
        if (!callsign) return;
        
        const name = prompt('–ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:');
        if (!name) return;
        
        const role = prompt('–†–æ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û–ø–µ—Ä–∞—Ç–æ—Ä, –†–∞–∑–≤–µ–¥—á–∏–∫):') || '–£—á–∞—Å—Ç–Ω–∏–∫';
        
        const newParticipant = {
            id: `user-${Date.now()}`,
            callsign: callsign,
            name: name,
            role: role,
            protocols: ['I'],
            status: {
                connection: 'offline',
                location: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            },
            isFavorite: false,
            battery: 100,
            lastActivity: '–ù–æ–≤—ã–π'
        };
        
        this.participants.push(newParticipant);
        this.saveParticipants();
        this.renderParticipants();
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
    saveParticipants() {
        localStorage.setItem('allo_participants', JSON.stringify(this.participants));
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        document.querySelectorAll('.nav-item').forEach(btn => {
            btn.addEventListener('click', () => {
                const page = btn.dataset.page;
                this.navigateTo(page);
            });
        });
    }
    
    // Touch –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    setupTouchHandlers() {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        document.addEventListener('gesturestart', (e) => e.preventDefault());
        
        // –£–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
        document.addEventListener('touchstart', () => {}, {passive: true});
    }
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    navigateTo(page) {
        console.log('Navigate to:', page);
        this.currentPage = page;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        document.querySelectorAll('.nav-item').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.page === page);
        });
        
        // –°—Ç—Ä–∞–Ω–∏—Ü—ã-–∑–∞–≥–ª—É—à–∫–∏
        const pages = {
            'groups': 'üë• –ì—Ä—É–ø–ø—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
            'map': 'üìç –ö–∞—Ä—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
            'voice': 'üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è —Å–≤—è–∑—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
            'help': '‚ùì –°–ø—Ä–∞–≤–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
            'settings': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
        };
        
        if (pages[page]) {
            alert(pages[page]);
        }
    }
    
    // Service Worker
    registerServiceWorker() {
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('sw.js')
                .then(() => console.log('‚úÖ Service Worker registered'))
                .catch(err => console.log('‚ùå SW registration failed:', err));
        }
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    window.app = new AllO_App();
});